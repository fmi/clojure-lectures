= Днес

* Скаларни типове
* Съставни типове: списъци, вектори, речници и техните абстракции

= Синтаксис
== Refresher

* Списъци и вектори: `()` и `[]`
* Викане на функция: `(+ 16 782163)`
* Може да влагаме на воля: `(/ (fib 65) (- (+ 11 4) 3))`
* Дефиниране на `Var`: `(def stefan "master")`
* Условия: `(if (fresh? lettuce) (salad lettuce) (coprse delivery-boy))`
* `(let [stefan "monster"] (str "Stefan is a " stefan))`
* `(do (println "baba") (println "dyado") "return-value")`
* `(quote (+ 1 2))` или `'(+ 1 2)`
* Функция: `(fn [ass] (kick (bleach ass)))`
* Валидни са идентификатори с `-`, `?`, `!` и много други символи
* Запетаята не значи нищо, като whitespace е

= Преди това: loop
== ...който остана да виси от предния път

За разлика от Scheme, в Clojure имате лесен начин да правите итеративни процеси без да правите рекурсивни функции.

= loop
== Прост пример

:code
  (loop [x 0]
    (when (< x 10)
      (println x)
      (recur (inc x))))

* Първата форма са двойки `име начална-стойност`
* Всяко извикване на `recur` връща изпълнението в началото на `loop`
* Подадените аргументи на `recur` са новите стойности на имената в `loop`
* `recur` трябва да бъде в tail позиция

= tail позиция
== ...и нейната липса

Казваме, че последния извикан израз в една функция е "в опашкова позиция" (tail position).

Тук `factorial` не е в tail позиция:

:annotate
  (defn factorial [n]
    (if (= n 1)
      1
      (* n (factorial (dec n)))))

  (factorial 5) ; =>

* За сметка на това, `*` е в "опашкова позиция"

= tail позиция
== ...втори опит

Тук `factorial` вече е в опашкова позиция:

:annotate
  (defn factorial [n counter]
    (if (= n 1)
      counter
      (factorial (dec n) (* counter n))))

  (factorial 5 1) ; =>

* Функцията внезапно започна да приема странен втори аргумент.
* Това трябва да ви е познато от Scheme, където това генерира "итеративен", а не "рекурсивен" процес.
* В Clojure горния код ще генерира рекурсивен процес. Защо?

= tail позиция
== ...този път наистина

Тук `factorial` вече е в опашкова позиция:

:annotate
  (defn factorial [n counter]
    (if (= n 1)
      counter
      (recur (dec n) (* counter n))))

  (factorial 5 1) ; =>

= Досадния втори аргумент
== Моля не правете това вкъщи. Или въобще.

Можете да замажете нещата по следния начин...

:annotate
  (defn factorial
    ([n] (factorial n 1))
    ([n counter]
      (if (= n 1)
        counter
        (recur (dec n) (* counter n)))))

  (factorial 5) ; =>

* Вероятно бихте направили нещо подобно в Scheme.
* В Clojure би било глупаво.
* Ползвайте `loop/recur`

= Финалната версия
== ...или как да пишем Fortran на Clojure

:annotate
  (defn factorial [n]
    (loop [result 1 counter n]
      (if (zero? counter)
        result
        (recur (* result counter) (dec counter)))))

  (factorial 5) ; =>

* Разбира се, това е далеч от идиоматичен Clojure код

= Финалната версия (2)
== Ама този път наистина "наистина"

:annotate
  (defn factorial [n]
    (reduce * (range 1 (inc n))))

  (factorial 5) ; =>

* Как работи това - вижте документацията.
* Припомняме: достъпна е в тези слайдове.

= Числа

Числата са скучни и знаете почти всичко. Почти.

:annotate
  10/4          ; =>

  (+ 2 111/222) ; =>

  (ratio? 1/2)  ; =>

* Рационалните числа са много по-точни
* Рационалните числа са малко по-бавни


= keywords
== Специални стойности

:annotate
  (defn create-user [name role]
    (let [internal-role-id (case role
                             :admin 19
                             :editor 11
                             -2)]
      (str "Created user with name " name
           " and ID of " internal-role-id)))

  (create-user "Barry" :lame-user) ; =>
  (create-user "Borry" :admin)     ; =>

* Интернирани са – два обекта с една и съща стойност се пазят само веднъж в паметта: `(identical? :baba :baba)`
* По-смислени са от низове за константни специални стойности, защото се пишат по-лесно и заемат по-малко памет

= regex
== ...или още "втория проблем"

* Подробностите няма да са днес, но...
* Синтаксис: `#"\d\d\d\w+"`
* [Clojure.org &rarr; Regex Support](http://clojure.org/other_functions#Other%20Useful%20Functions%20and%20Macros-Regex%20Support)

= Абстракции за колекции

{{{
<blockquote>It is better to have 100 functions operate on one data abstraction than 10
functions on 10 data structures.</blockquote>
<p style="text-align: right">Rich Hickey</p>
}}}

* Различните абстракции за колекции в Clojure използват един и същи интерфейс, който не се влияе от имплементацията: `seq`, `conj`, `first`, `rest`, `count`…
* Колекции – `conj`, `empty`, `count`, `=`, `seq`
* Поредици (sequences) – `seq`, `first`, `rest`, `lazy-seq`
* Асоциативни – `seq`, `assoc`, `dissoc`, `get`, `contains?`
* Индексирани – `seq`, `get`, `nth`
* Стек – `conj`, `pop`, `peek`
* Сортирани
* Множество

= Имплементации на абстракциите

* Всички структури, за които ще говорим днес са *immutable* и *persistent* – веднъж насочим ли едно име към стойност, тя никога не се променя. При това без да губим скорост или памет.
* Вектори
* Списъци
* Множества
* Речници
* Сортирани речници
* Опашка

= Вектори
+ Най-популярната реализация на индексирана и поредна колекция
+ Използват се в синтаксиса на езика
+ Може да се вмъква само отзад и то е на практика `O(1)`
+ Достъпът до произволен елемент също е на практика `O(1)`

:annotate
  (def my-bag ["laptop" "knife" "earphones" "phone"])
  (def stuff-for-fmi ["clicker" "piece of mind" "Snickers"])

  (conj my-bag "ФЗФ file") ; =>
  (into my-bag stuff-for-fmi) ; =>

= O(1) "на практика"
== ...или поне почти

* "на практика `O(1)`" ще рече <code>log<sub>32</sub>(n)</code>
* За `n` = 1 000 000 000 елемента, <code>log<sub>32</sub>(n)</code> е шест стъпки
* За сравнение, <code>log<sub>2</sub>(n)</code> е 30 стъпки
* Може да мислите за него като "константно време за практически цели"
* Ако сте смели, пробвайте [Purely Functional Data Structures](http://www.amazon.com/Purely-Functional-Structures-Chris-Okasaki/dp/0521663504)
* Или [оригиналната публикация](http://www.cs.cmu.edu/~rwh/theses/okasaki.pdf)

= Операции с вектори
== (в неевклидови пространства)

+ Следват операции, които може да правите с вектори
+ Векторите принадлежат на няколко от показаните по-рано абстракции
+ Някои от тях са: поредици, индексируеми, стек
+ Повечето от тези операции работят и върху други колекции

= first и rest
== Внуците на `car` и `cdr`

:annotate
  (def my-bag ["laptop" "knife" "earphones" "phone"])

  (first my-bag) ; =>
  (rest my-bag)  ; =>


* Обърнете внимание: `rest` не връща вектор
* Въпреки кръглите скоби, не връща и списък
* Връща `seq`

= seq
== Абстрактна работа

* `seq`-овете могат да бъдат обхождани последователно
* Можете да вземате `seq` от разни неща със `(seq thing)`
* Нещата могат да бъдат `Iterable`, масиви и прочее (това са Java неща)
* `seq`-овете имат `first` и `rest`
* `first` връща първия елемент
* `rest` връща `seq` от останалите елементи

= seq и празните неща
== ...защото, закъде сме без частните случаи?

В Clojure има любопитно поведение:

:annotate
  (first [])    ; =>
  (rest [])     ; =>
  (seq [])      ; =>

  (first [nil]) ; =>
  ; Не може да прецените дали е празно или първия елемент е nil

  (rest nil)    ; =>
  ; Не може да прецените дали е nil или празно

= next

Това е като `(seq (rest x))`

:annotate
  (rest [1 2 3]) ; =>
  (next [1 2 3]) ; =>

  (rest []) ; =>
  (next []) ; =>

  (seq (rest [])) ; =>

= Индексиране
== TIMTOWDY

* `(nth v n)` взема n-тия елемент
* `(get v n)` прави същото, с малка разлика
* `(v n)` също взема n-тия елемент (ползваме вектора като функция)

= Индексиране на вектори
== The final showdown!

:annotate
  (def my-bag ["laptop" "knife" "earphones" "phone"])

  (nth my-bag 1)     ; =>
  (nth my-bag 6)     ; =>
  (nth my-bag 6 :eh) ; =>

  (get my-bag 1)     ; =>
  (get my-bag 6)     ; =>
  (get my-bag 6 :eh) ; =>

  (my-bag 1)         ; =>
  (my-bag 6)         ; =>
  (my-bag 6 :eh)     ; =>

* Ползвайте `(v n)`...
* ...освен ако не искате стойност по подразбиране - тогава `nth`...
* ...или `get`, ако искате `nil`.
* `nth` и `get` са генерични функции.

= Стекове
== Векторите живеят двоен живот

За да ползвате нещо като стек, нужни са ви `conj`, `peek` и `pop`

:annotate
  (def my-stack ["lettuce" "cheese" "marmite"])

  (conj my-stack "salami") ; =>
  (peek my-stack)          ; =>
  (pop my-stack)           ; =>
  (pop [])                 ; =>

= Вектори
== Други функции

И някои други функции:

:annotate
  (def my-stack ["lettuce" "cheese" "marmite" "salami"])

  (assoc my-stack 1 "ham") ; =>
  (subvec my-stack 1 3)    ; =>
  (rseq my-stack)          ; =>
  (count my-stack)         ; =>

= Списъци

* Ползват се почти само за код
* Едносвързан списък, пази се само началото
* Стават за стек
* Добавянето отпред е `O(1)` (на практика...)
* Добавянето отзад е `O(n)`!
* Достъпването на елемент по индекс също е `O(N)`
* `count`, учудващо, е в константно време

= Списъци
== И малко разлики от векторите

:annotate
  ; Странен синтаксис
  (def l '(:lettuce :tomato :cheese))
  (def v [:lettuce :tomato :cheese])

  (conj l :salami) ; =>
  (conj v :salami) ; =>

  (peek l) ; =>
  (peek v) ; =>

  (pop l)  ; =>
  (pop v)  ; =>

= Цитиране
== Или още "quoting"

Обикновено се ползват двойни кавички и курсив:

{{{
<blockquote>Alas, poor Yorick! I knew him, Horatio!</blockquote>
}}}

= Цитиране
== ...а сега, в Clojure

Става с `(quote)` или reader макроса `'`

:annotate
  (def answer 42)

  (quote [1 answer :keyword]) ; =>
  [1 answer :keyword]         ; =>

  (quote (+ answer 1))        ; =>
  (+ answer 1)                ; =>

  '(one two :three)           ; =>
  'foo                        ; =>

* Числата се оценяват на себе си
* Keyword-ите също
* Символите се търсят като имена в текущия scope
* Списъците се оценяват на извикване на функция

= Някои други функции

:annotate
  (def things (seq [:lettuce :tomato :cheese]))

  things         ; =>
  (vec things)   ; =>
  (list* things) ; =>
  (vector 1 2)   ; =>

  (cons 1 [2])   ; =>

= Другите типове

* Речници: `{:one 1 :two 2}`
* Множества: `#{:one :two :three}`

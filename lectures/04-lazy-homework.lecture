= Предният път

* мапита, множества, консота
* почти всичко е функция
* стандартните операции работят на почти всичко
* деструктуриране
* `for`

= Днес

* Решения на домашно и предизвикателство
* Мързеливи поредици

= `bisect`

:code
  (defn bisect [f neg-point pos-point close-enough?]
    (let [mid (/ (+ neg-point pos-point) 2)]
      (if (close-enough? neg-point pos-point)
        mid
        (let [f-mid (f mid)]
          (cond
            (pos? f-mid) (recur f neg-point mid close-enough?)
            (neg? f-mid) (recur f mid pos-point close-enough?)
            :else mid)))))

= `make-bisector`

:code
  (defn abs [x]
    (if (pos? x) x (- x)))

  (defn make-bisector [tolerance]
    (fn [f a b]
      (let [a-value (f a)
            b-value (f b)
            close-enough? #(< (abs (- %1 %2)) tolerance)]
        (cond
          (and (neg? a-value)
               (pos? b-value))
          (bisect f a b close-enough?)

          (and (pos? a-value)
               (neg? b-value))
          (bisect f b a close-enough?)

          :else nil))))

= Опашка

* Не е супер тривиално
* Не е супер полезно
* Има вградена

= Опашка със cheat кодове

В Clojure има `clojure.lang.PersistentQueue`:

:annotate
  (def make-queue #(clojure.lang.PersistentQueue/EMPTY))
  (def push-to-queue conj)
  (def peek-at-queue first)
  (def pop-from-queue pop)
  (def empty-queue? empty?)

= Наивна опашка (1)

:annotate
  (defn make-queue [] [])
  (defn push-to-queue [q x] (conj q x))
  (defn peek-at-queue [q] (first q))
  (defn pop-from-queue [q] (vec (rest q)))
  (defn empty-queue? [q] (empty? q))

Какви са проблемите?

* На всеки pop прави копие на вектора
* Няма да има структурно споделяне
* Изключително бавно, ако опашката има повече елементи

= Наивна опашка (2)

:annotate
  (defn make-queue [] [])
  (defn empty-queue? [q] (empty? q))
  (defn push-to-queue [q x] (conj q x))
  (defn peek-at-queue [q] (first q))
  (defn pop-from-queue [q] (if (empty-queue? q) [] (subvec q 1)))

Какви са проблемите?

* `subvec` връща бързо "подопашка"
* `conj` на `subvec` връща бързо нов `subvec`
* Дотук добре, но вектора никога не намалява. Защо?
* `subvec` връща подвектор, който пази референция към оригиналния вектор
* В последствие елементите на опашката, `pop`-нати по този начин, няма да бъдат събрани от Garbage Collector-a
* Паметта не се освобождава и ето ви memory leak

= Опашка с мап
== Версията на Стефан

:annotate
  (defn make-queue []
    {:front 0 :back 0})

  (defn empty-queue?
    [{:keys [front back]}]
    (= front back))

  (defn push-to-queue
    [{:keys [back] :as queue} item]
    (merge queue {back item :back (inc back)}))

  (defn peek-at-queue
    [{:keys [front] :as queue}]
    (queue front))

  (defn pop-from-queue
    [{:keys [front] :as queue}]
    (if-not (empty-queue? queue)
      (dissoc (assoc queue :front (inc front) front))
      queue))

= Опашка с мап
== Версията на Ники

:annotate
  (defn make-queue [] {:front 0 :values {}})

  (defn empty-queue? [{:keys [front values]}]
    (empty? values))

  (defn push-to-queue [{:keys [front values]} x]
    {:front front :values (assoc values (+ front (count values)) x)})

  (defn peek-at-queue [{:keys [front values]}]
    (values front))

  (defn pop-from-queue [{:keys [front values] :as queue}]
    (if-not (empty-queue? queue)
      {:front (inc front) :values (dissoc values front)}
      queue))

= Ефективна имплементация
== Два вектора

:annotate
  (defn make-queue
    []
    {:front nil :back []})

  (defn push-to-queue
    [{:keys [front back]} item]
    {:front front :back (conj back item)})

  (defn peek-at-queue
    [{:keys [front back]}]
    (first (or front back)))

  (defn pop-from-queue
    [{:keys [front back]}]
    (if (seq front)
      {:front (next front) :back back}
      {:front (next back) :back []}))

  (defn empty-queue?
    [{:keys [front back]}]
    (and (empty? front) (empty? back)))

= Ефективна имплементация
== Два вектора (2)

* Относително константни операции
* Добавянето на елемент е константно
* Вземането на елемент - също
* Както и местенето от `:back` към `:front`
* Но целия `front` се пази, което може да е проблем откъм памет

= Ефективна имплементация
== Вектор и списък

:annotate
  (defn make-queue
    []
    {:front nil :back []})

  (defn push-to-queue
    [{:keys [front back]} item]
    {:front front :back (conj back item)})

  (defn peek-at-queue
    [{:keys [front back]}]
    (first (or front back)))

  (defn pop-from-queue
    [{:keys [front back]}]
    (if (seq front)
      {:front (next front) :back back}
      {:front (next (apply list back)) :back []}))

  (defn empty-queue?
    [{:keys [front back]}]
    (and (empty? front) (empty? back)))

= Ефективна имплементация
== Вектор и списък (2)

* Малко по-бавно поради прехвърлянето от вектор към списък
* По-ефективно откъм памет
* `(apply list (next v))` понеже `(list* (next v))` не връща списък
* Go figure

= Стрелки

Стрелките ни позволяват лесно да композираме функции.

+ Няма нужда да подаваме ламбди, изрази са достатъчни.
+ Дори някой от изразите да не е списък, стрелките го правят списък.

= Стрелки

`->` слага стойността на *второ* място в списъка (първи аргумент)
:code
  (-> (make-queue)
      (push-to-queue "baba")
      (push-to-queue "dyado")
      pop-from-queue
      peek-at-queue)

Свежда се до следния s-expression:
:code
  (peek-at-queue (pop-from-queue (push-to-queue (push-to-queue (make-queue) "baba") "dyado")))

= Стрелки

`->>` слага стойността на *последно* място в списъка (последен аргумент)
:annotate
  (->> (range 10) (filter even?) (map #(* % %)) (reduce +))
  ; =>

Свежда се до следния s-expression:
:code
  (reduce + (map (fn* [p1__195#] (* p1__195# p1__195#)) (filter even? (range 10))))

= Хистограма

* Не е толкова важно как ще я решите
* Разгледайте чуждите решения на сайта и вижте какво ще научите
* Следват две от нас


= Хистограма
== Първо решение

:annotate
  (defn histogram
    [numbers]
    (reduce #(update-in %1 [%2] inc)
            (-> (apply max numbers) inc (repeat 0) vec)
            numbers))

= Хистограма
== Второ решение

:annotate
  (defn histogram
    [xs]
    (let [freqs (frequencies xs)]
      (mapv #(freqs % 0)
            (->> freqs keys (apply max) inc range))))

= Рапончо

Много умен, леко заекво-фъфли, може да говори безкрайно, всяка дума започва със следващата буква от азбуката на последната от предната дума.

{{{
<img src="04-lazy-homework/nerd.jpg" alt="Рапончо – nerd">
}}}

= Извличане на думи от Рапончо

+ Искаме да вземем колкото думи си поискаме (Рапончо може да говори вечно!)
+ Искаме да можем да ги получим като вектор, да ги отпечатваме и т.н.

= Имплементация на помощни ф-ии 1/2
:annotate
  (def initial-word "Hi" )

  (defn next-letter [letter]
    (char (+ 97 (mod (inc (- (int letter) 97)) 26))))

  (defn rand-word-length []
    (+ 4 (rand-int 6)))

  (defn rand-letter []
    (char (+ 97 (rand-int 26))))

  (defn rand-word []
    (apply str (take (rand-word-length) (repeatedly rand-letter))))

  (defn rand-word-starting-with [letter]
    (str letter (rand-word)))

  (defn next-word [word]
    (rand-word-starting-with (next-letter (last word))))

  (next-word "baba") ; =>
  (next-word "hazz") ; =>

= `apply`

Когато искаме да подадем много аргументи на функция, но ги имаме само в поредица.

:annotate
  (def strings ["baba" " loves " "kuncho"])

  (str strings)
  ; =>

  (apply str strings)
  ; =>

  (str (strings 0) (strings 1) (strings 2))
  ; =>

  (apply str (first strings) (rest strings))
  ; =>

  (apply str (first strings) (second strings) ["kuncho"])
  ; =>

  (apply max [1 2 2765234])
  ; =>

= `apply` и макроси

Не може да го ползваме с макроси:
:code
  (apply and [true :baba nil (+ 1 2)])
  ; CompilerException java.lang.RuntimeException: Can't take value of a macro:

= `repeatedly`

Когато искаме да викнем функция безкрайно много пъти пъти, най-често със странични ефекти.

`repeatedly` ни връща безкрайна поредица, `take` връща първите `n` елемента от каквато и да е поредица.

:code
  (defn all-the-randoms [n]
    (take n (repeatedly #(rand-int 10))))

  (all-the-randoms 5)

= `take-words`

Дава ни вектор с `n` на брой случайни думи

:code
  (defn take-words
    ([n]
      (take-words-rec (dec n) [initial-word]))
    ([n words]
      (if (= n 0)
        words
        (take-words (dec n) (conj words (next-word (last words)))))))

  (take-words-rec 20000) ; StackOverflowError

= recurза се

:code
  (defn take-words
    ([n]
      (take-words-rec (dec n) [initial-word]))
    ([n words]
      (if (= n 0)
        words
        (recur (dec n) (conj words (next-word (last words)))))))

  (count (take-words-rec 20000)) ; 20000

= и с `loop`

:code
  (defn take-words [n]
    (loop [i (dec n) words [initial-word]]
      (if (= i 0)
        words
        (recur (dec i) (conj words (next-word (last words)))))))

= `print-words`

Ако искаме да отпечатаме думите, `print-words` е сходна

:code
  (defn print-words [n]
    (loop [i (dec n) word initial-word]
      (when (> i 0)
        (print word " ")
        (recur (dec i) (next-word word)))))

= `map-words`

Да си напишем `map` също е доста лесно:

:code
  (defn map-words [n f]
    (loop [i (dec n) word (f initial-word)]
      (when (> i 0)
        (print word " ")
        (recur (dec i) (f (next-word word))))))

  (map-words 5 #(str "!" %)) ; !Hi  !jvoyzdpvc  !dueafz  !acrqd

= Абстракция! Абстракция! Абстракция!

По-добре да имаме 100 функции, които работят върху една абстракция, нали? Ние отиваме в другата посока, вместо да ползваме вградените функции.

Колко по-яко би било ако можеше да ползваме просто:

:code
  (take 5 (words))

  (doseq [word (take 5 (words))]
    (print word))

  (map #(str "!" %) (take 5 (words)))

  (filter I-undestand (take 5 (words)))

= `lazy-seq`

Всъщност можем :-) Enter lazy sequences.

`lazy-seq` не се изпълнява веднага, а само когато се опитаме да достъпим тази част на поредицата.

В `lazy-seq` трябва да сложим изрази, които връщат поредица или nil.

:code
  (defn words
    ([]
      (words initial-word))
    ([word]
      (lazy-seq
        (cons word (words (next-word word))))))

= Нагледно

{{{
<img src="04-lazy-homework/lazy-seq.png" alt="рисунка на lazy-seq">
}}}

= Не си губете главата!

Якото на мързеливите поредици е, че няма нужда да държат и смятат всички елементи, а само тези, които ни трябват.

Но! Понякога ако запазим референция към някой предишен елемент, паметта за елементите няма да бъде освободена.

:code
  (let [r (range 1e9)] [(first r) (last r)])
  ; [0 999999999]

  (let [r (range 1e9)] [(last r) (first r)])
  ; java.lang.OutOfMemoryError: GC overhead limit exceeded

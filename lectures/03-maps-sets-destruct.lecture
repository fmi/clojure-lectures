= Днес

* Maps
* Множества
* Деструктиране
* Мета (неща за курса)

= Курса в GitHub

* Лекции: [gh:fmi/clojure-lectures]
* Може да пращате корекции/предложения, да гледате код и да build-нете локално
* Домашни: [gh:fmi/clojure-homework]
* Може да следите промените в условията и да видите примерния тест
* Сайт: [gh:skanev/evans] (на Ruby)
* Може да отворите issue за неща по сайта

= Домашно

* Имате първо домашно, до четвъртък
* Имате първо предизвикателство, до утре
* И двете приключват в 17:00
* Въпроси?

= Конвенции

* Много от вашия код на сайта е лошо подравнен
* Искаме да спазвате стриктни конвенции
* Може да ги намерите в GitHub: [gh:bbatsov/clojure-style-guide]
* Ще си затворим очите за първото домашно (и предизвикателство)
* От там нататък, нарушенията ще струват точки
* Първото нарушение е гратис, следващите са по една точка
* В реда на нещата е кодът ви да работи, но да получите 0 точки заради неспазване на конвенции
* Няма да коментираме неща, които не спазват конвенциите (освен "Това не спазва конвенциите")
* Същото важи и за проекта
* Capisce?

= maps

* Фундаментална структура (както по принцип, така и в Clojure)
* Много имена: хешове, речници, асоциативни масиви и т.н.
* Ще предпочитаме неологизма "мап" (мн.ч. мапове)
* Различно от <abbr title="higher-order function">HOF</abbr>-а `map`
* Съпоставя ключове на стойности

= maps
== Синтаксис

:annotate
  {}
  {:name "Luke Skywalker" :job "Jedi" :gender :male}
  {:name "Inertia Creeps" :album "Mezzanine"}
  {1 "one", 2 "two", 3 "three"}

= maps
== Just the facts

* Всеки Clojure тип може да е ключ. Immutability-то помага (би било проблем иначе).
* При слагане на Java обекти трябва да спазвате стандартната `Object.equals` и `Object.hashCode` семантика.
* Реализацията е по-сложна от хеш таблица. Има няколко вида мапове.
* В Clojure няма обекти в традиционния смисъл. Въпреки абстракциите за съставни данни (`defrecord`, `deftype`), мапове се ползват постоянно.

= maps
== Достъпване

:annotate
  (def song
    {:name "Inertia Creeps"
     :album "Mezzanine"
     :artist "Massive Attack"})

  ; map-овете са функции
  (song :name)  ; =>

  ; Можете да вземете ключове и стойности
  (keys song) ; =>
  (vals song) ; =>

  ; Самият мап е последователност от MapEntry-та
  (seq song)
  ; =>

  (class (first (seq song))) ; =>

= maps
== Модификации

:annotate
  (def numbers {:one 1 :two 2 :three 3})

  ; Добавяне на елемент
  (assoc numbers :four 4)
  ; =>

  ; Премахване на елемент по ключ
  (dissoc numbers :two)
  ; =>

  ; "Смесване" на два map-а
  (merge numbers {:four 4 :five 5})
  ; =>

  ; into и conj работят и за хешове
  (conj numbers [:four 4])
  ; =>
  (into numbers [[:four 4] [:five 5]])
  ; =>
  (into numbers {:one "Ho-ho-ho!" :seven 7})
  ; =>

= maps
== Достъпване по ключове

Всъщност, имате три варианта:

:annotate
  (def track {:name "A Love Supreme", :artist "John Coltrane"})

  ; Стандартния начин
  (track :name)                ; =>
  (track :album)               ; =>
  (track :album "Unknown")     ; =>

  ; get
  (get track :name)            ; =>
  (get track :album)           ; =>
  (get track :album "Unknown") ; =>

  ; Keyword-ите също са функции
  (:name track)                ; =>

  ; Имаме и `find`, който връща `MapEntry`
  (find track :name)           ; =>

* Използвайте keyword-и като функции, понеже е консистентно с `defrecord`...
* ...иначе ползвайте map-а като функция...
* ...и ползвайте `get` само когато не знаете дали наистина имате map.

= Множества

* Съвсем като крайните такива в математиката
* Нямат подредба
* Нямат повторения
* Синтаксис: `#{1 2 3}`

= Множества
== Синтаксис

:annotate
  (def favorites #{"John Coltrane" "Melissa Horn" "Morphine"})

  (conj favorites "Nirvana")
  ; =>

  (conj favorites "Morphine")
  ; =>

  (disj favorites "Melissa Horn")
  ; =>

= Множества
== Достъпване

:annotate
  (def primes #{13 11 7 5 3 2})

  (seq primes)         ; =>

  (primes 11)          ; =>
  (primes 4)           ; =>

  (contains? primes 7) ; =>
  (contains? primes 4) ; =>

  (get primes 11)      ; =>
  (get primes 19 :eh)  ; =>

= Множества
== Като функции

Всяко множество може да служи като функция:

:annotate
  (def nums [1 2 3 4 5 6 7 8 9 10])

  (remove (fn [x] (or (= x 2) (= x 5))) nums)
  ; =>

  (remove #{2 5} nums)
  ; =>

  (remove (complement #{2 5 7 11 13 17 19}) nums)
  ; =>

= Множества
== false и nil

`(a-set x)` връща `x`, ако `x` е елемент от `a-set`. Това прави множествата съдържащи `nil` или `false` по-странни:

:annotate
  (def weird #{42 nil false true})

  (if (weird 42)    :yes :no) ; =>
  (if (weird true)  :yes :no) ; =>
  (if (weird nil)   :yes :no) ; =>
  (if (weird false) :yes :no) ; =>

Може да ползвате `contains?`:

:annotate
  (contains? #{false nil} false) ; =>
  (contains? #{false nil} nil)   ; =>

= contains?
== Achtung!

*Важно:* `contains?` не връща дали даден елемент се намира в колекция. Връща дали съществува такъв индекс:

:annotate
  (contains? [:foo :bar] :foo) ; =>
  (contains? [:foo :bar] 1)    ; =>
  (contains? [:foo :bar] 2)    ; =>

= Множества
== Други операции

В [clojure.set](http://clojure.github.com/clojure/clojure.set-api.html) има по-интересни операции за множества:

:annotate
  (use 'clojure.set)

  (difference #{1 2 3 4} #{2 4 6 8}) ; =>
  (intersection #{1 2 3} #{2 3 4 5}) ; =>
  (subset? #{1 2} #{0 1 2 3})        ; =>
  (union #{0 1 2 3} #{2 3 4 5})      ; =>

= cons
== Не-точно-Scheme

`cons` създава лиспоподобен cons cell. Това е различно от списък:

:annotate
  (cons 1 nil)          ; =>
  (cons 1 (cons 2 nil)) ; =>

  (class (cons 1 (cons 2 nil))) ; =>
  (class '(1 2))                ; =>

Появява се тук-таме.

= Генерични операции

В Clojure повечето функции за работа с колекции работят за различни типове колекции:

+ `conj`
+ `into`
+ `get`
+ `assoc`

= Генерични операции
== conj

`conj` разширява колекцията с един елемент. Елемента може да отиде на "различни позиции" в зависимост от типа на колекцията.

:annotate
  (conj [:one :two :three] :four)   ; =>
  (conj '(:one :two :three) :four)  ; =>
  (conj {:one 1 :two 2} [:three 4]) ; =>
  (conj #{:one :two} :three)        ; =>

= Генерични операции
== into

`into` добавя елементите от една колекция в друга. Върнатият тип е типа на първия аргумент.

:annotate
  (into [1 2 3] '(4 5))      ; =>
  (into '(1 2 3) [4 5])      ; =>
  (into #{1 2 3} [3 4])      ; =>
  (into {:one 1} [[:two 2]]) ; =>

= Генерични операции
== conj, into и cons

`conj` и `into` ще ползват `cons`, ако не са сигурни за типовете:

:annotate
  (def nums (conj (rest [0 2 3]) 1))
  (def primes (into (rest [1 2 3 5]) [7 11]))

  nums           ; =>
  (class nums)   ; =>

  primes         ; =>
  (class primes) ; =>

Това се случва, защото `(rest [0 2 3])` не е вектор.

= Генерични операции
== get и assoc

`get` взема елемента на даден индекс. `assoc` съпоставя елемент на даден индекс.

:annotate
  (get [:zero :one :two] 1)     ; =>
  (get #{:zero :one :two} :one) ; =>
  (get {:one 1 :two 2} :one)    ; =>

  (assoc [:zero :one :two] 2 :zwei)
  ; =>

  (assoc {:one 1 :two 2} :one :ein)
  ; =>

= Вложени колекции
== get-in

`get-in` рови във вложена колекция.

:annotate
  (def numbers
    {:english [:zero  :one  :two  :three]
     :swedish [:nolla :ett  :tvaa :tre]
     :german  [:null  :eins :zwei :drei]})

  (get-in numbers [:english 1]) ; =>
  (get-in numbers [:swedish 0]) ; =>
  (get-in numbers [:german 2])  ; =>

  (get-in numbers [:french 2])  ; =>
  (get-in numbers [:swedish 4]) ; =>

= Вложени колекции
== assoc-in

`assoc-in` променя вложена колекция

:annotate
  (def numbers
    {:english [:zero :one] :swedish [:nolla :ett] })

  (assoc-in numbers [:english 0] :oh)
  ; =>

  (assoc-in numbers [:swedish 1] :en)
  ; =>

  ; Ако липсва някое звено, assoc-in поставя map
  (assoc-in numbers [:german 1] :eins)
  ; =>

  ; Ако индекса не е подходящ, има изключение
  (assoc-in numbers [:swedish :foo] :bar)
  ; =>

= Вложени колекции
== update-in

`update-in` е като `assoc-in`, ама получава функция:

:annotate
  (def people {:jesus {:age 33}})

  (update-in people [:jesus :age] inc)
  ; =>

= Циклични структури

Можем ли да направим map, който реферира към себе си?

Една идея би била:

:code
  (def chunk {:prev {} :next {} :self nil})

  (def chunk (assoc chunk :self chunk))

* Това няма да сработи
* Because immutability, that's why
* `(chunk :self)` ще сочи към стара версия на chunk
* Въобще, няма как да го направите

= Равенство на колекции

Има три класа на еквивалентност - последователни, множества и мапове. Колекции от всеки клас са равни на колекции от същия клас ако имат еднакви елементи. Колекции от различни класове не са равни помежду си.

:annotate
  (= [1 2 3] [1 2 3])       ; =>
  (= '(1 2 3) '(1 2 3))     ; =>
  (= [1 2 3] '(1 2 3))      ; =>
  (= [1 2] (cons 1 [2]))    ; =>

  (= #{1 2 3} #{3 2 1})     ; =>
  (= #{1 2 3} [1 2 3])      ; =>

  (= {1 2, 3 4} {1 2, 3 4}) ; =>
  (= {1 1, 2 2} #{1 2})     ; =>
  (= {1 2} [[1 2]])         ; =>

Не забравяйте, че има няколко различни имплементации на множества и мапове.

= for
== a.k.a list comprehension

`for` ви дава list comprehension в Clojure:

:annotate
  (def numbers [1 2 3 4])

  (def squares
    (for [n numbers] (* n n)))

  squares ; =>

= for
== Няколко колекции

`for` може да обхожда по няколко колекции.

:annotate
  (def numbers [42 77])
  (def words [:foo :bar :baz])

  (def cartesian
    (for [n numbers w words]
      [n w]))

  cartesian
  ; =>

= for
== when

`for` може да филтрира с `:when`

:annotate
  (def pythagorean
    (for [x (range 1 15)
          y (range 1 15)
          z (range 1 15)
          :when (and (< x y z)
                     (= (+ (* x x) (* y y)) (* z z)))]
      [x y z]))

  pythagorean
  ; =>

* Обърнете внимание как ключовите думи се ползват като част от синтаксиса

= for
== let

`for` може да въвежда имена с `:let`:

:annotate
  (def triples
    (for [x (range 5)
          :let [square (* x x)
                cube (* x x x)]]
      [x square cube]))

  triples
  ; =>

= for
== while

`for` има и `while`, който спира на първия елемент, който не се оценява на истина:

:annotate
  (def nums [1 2 -1 -2 3 4 -3 -4])

  (for [x nums :while (pos? x)] x)
  ; =>

  (for [x nums :when (pos? x)] x)
  ; =>

= for
== while, when, let

`while`, `when` и `let` могат да се комбинират на различни позиции в comprehension-а:
:annotate
  (def pythagorean
    (for [z (range 26)
          y (range 26)
          :while (< y z)
          x (range 26)
          :while (< x y)
          :let [xx (* x x)
                yy (* y y)
                zz (* z z)]
          :when (= (+ xx yy) zz)]
      [x y z]))

  pythagorean
  ; =>

= doseq

`doseq` е като `for`, но връща `nil`. Обикновено се използва за странични ефекти.

:code
  (doseq [z (range 26)
          y (range 26)
          :while (< y z)
          x (range 26)
          :while (< x y)
          :let [xx (* x x)
                yy (* y y)
                zz (* z z)]
          :when (= (+ xx yy) zz)]
    (prn [x y z]))

Тук принтираме тройките, вместо да ги връщаме като списък.

= Деструктиране

* Чували сте да казваме "деструктивен let"
* Това не значи "със странични ефекти"
* Така се наричат неща, които разлагат съставна структура на компонентите ѝ
* Мислете за destruct като обратното на struct
* ...каквото и да е struct :)

= Деструктиране
== Последователност

`let` има специален синтаксис за разделяне на обект на съставни части:

:annotate
  (let [[a b c] (range 3)]
    a ; =>
    b ; =>
    c ; =>
    nil)

*NB:* Този `nil` е там, защото сама затваряща скоба (`)`) на ред е просто твърде грозно.

= Деструктиране
== Последователност (2)

Clojure игнорина недостигащите/излишните елементи:

:annotate
  (let [[a b c] (range 2)]
    c ; =>
    nil)

  (let [[a b c] (range 4)]
    c ; =>
    nil)

А може и да "пропускате" стойности на елементи:

:annotate
  (let [[a _ c] [1 :spacer 25]]
    a ; =>
    _ ; =>
    nil)

Ползването на долна черта не е специален синтаксис, а просто валиден символ.
Долна черта може да ползваме повече от веднъж, като тя взима последната стойност указана за нея.

= Деструктиране
== &

`let` може да вземе "опашката" на последователност с `&`:

:annotate
  (def numbers [1 2 3 4])

  (let [[head & tail] numbers]
    head ; =>
    tail ; =>
    nil)

  (let [[a b & c] numbers]
    a ; =>
    b ; =>
    c ; =>
    nil)

= Деструктиране
== Вариадични функции

Така може да дефинирате функция с произволен брой аргументи:

:annotate
  (defn prefix-with
    [prefix & xs]
    (map (partial str prefix) xs))

  (prefix-with ":" "foo" "bar")
  ; =>

= Деструктиране
== :as

`let` ако ви трябва цялата колекция, може да ползвате `:as`.

:annotate
  (let [[head & tail :as everything] (range 4)]
    head       ; =>
    tail       ; =>
    everything ; =>
    nil)

= Деструктиране
== map-ове

`let` може да деструктира и `map`-ове:

:annotate
  (def track {:name "Acknowledgement"
              :artist "John Coltrane"
              :album "A Love Supreme"
              :plays 500
              :score 10
              :genre "Jazz"})

  (let [{name :name artist :artist} track]
    (str "Now playing '" name "' by " artist)
    ; =>
    nil)

Обърнете внимание, че ключовете са втори.

= Деструктиране
== вложени map-ове

Разбира се, може да деструктира и вложени `мап`-ове.

:annotate
  (def track {:name "Acknowledgement"
              :artist "John Coltrane"
              :details {:album "A Love Supreme" :year 1965}})

  (let [{name :name artist :artist {album :album year :year} :details} track]
    (str "Now playing '" name "' by " artist " from '" album "'(" year ")")
    ; =>
    nil)

= Деструктиране
== map-ове: стойности по подразбиране

Деструктирането може да задава стойности по подразбиране с `:or`:

:annotate
  (defn play
    [{name :name artist :artist
      :or {artist "Unknown artist"}}]
    (str "Now playing '" name "' by " artist))

  (play {:name "Acknowledgement" :artist "John Coltrane"})
  ; =>

  (play {:name "Greensleeves"})
  ; =>

= Деструктиране
== map-ове: :as

Подобно на списъците, може да подавате `:as`.

:annotate
  (defn play
    [{name :name artist :artist
      :or {artist "Unknown artist"}
      :as track}]
    (str "Now playing '" name "' by " artist))

Тук се вижда, че когато ключовете са на четна позиция (`:name`, `:artist`) се търсят в map-а, докато когато са в нечетна (`:as`, `:or`) имат специално значение.

= Деструктиране
== map-ове: :keys

Ако искате да вземете елементи от хеша, които са съпоставени на ключови думи, може да го направите с `:keys`:

:annotate
  (defn play
    [{:keys [artist name]}]
    (str "Now playing '" name "' by " artist))

  (play {:name "Acknowledgement" :artist "John Coltrane"})
  ; =>

Ако ключовете са низове, може да ползвате `:strs` или `:syms` за символи.

= Деструктиране
== map-ове финално

И разбира се, може да композирате всичко наведнъж

:annotate
  (defn play
    [{:keys [artist name]
      :or {artist "unknown artist"}
      :as track}]
    (str "Now playing '" name "' by " artist))

  (play {:name "Acknowledgement"})
  ; =>

= Деструктиране
== in summary

* `[[a b c] thing]`
* `[[head & tail] thing]`
* `[[x & xs :as all] thing]`
* `[{name :name artist "artist"} thing]`
* `[{:keys [name artist]} thing]`
* `[{name :name :as all} thing]`
* `[{name :name :or {name "default"}} thing]`

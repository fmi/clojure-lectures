= Мета

* Слайдовете са в GitHub - [gh:fmi/lectures]
* Регистрирайте се на сайта
* [Попълнете анкетата, моля](http://fmi.clojure.bg/polls/1/my_answer)

= Зайци

<img src="01-intro/two-rabbits.jpg" width="90%">

= Още зайци

<img src="01-intro/many-rabbits.jpg" width="90%">

= Как всъщност се въдят зайците

:annotate
  (def fib (fn [n]
    (if (= n 0)
        1
        (if (= n 1)
            1
            (+ (fib (- n 1)) (fib (- n 2)))))))

  (fib 0)  ; =>
  (fib 11) ; =>

= 90% от синтаксиса

* Списъци и вектори: `()` и `[]`
* Викане на функция: `(+ 16 782163)`
* Може да влагаме на воля: `(/ (fib 65) (- (+ 11 4) 3))`
* Дефиниране на `Var`: `(def stefan "master")`
* Условия: `(if (fresh? lettuce) (salad lettuce) (coprse delivery-boy))`
* `(let [stefan "monster"] (str "Stefan is a " stefan))`
* `(do (println "baba") (println "dyado") "return-value")`
* `(quote (+ 1 2))` или `'(+ 1 2)`
* Функция: `(fn [ass] (kick (bleach ass)))`
* Валидни са идентификатори с `-`, `?`, `!` и много други символи
* Запетаята не значи нищо, като whitespace е

= Документация

* [http://clojure.github.com/] 1.4+
* [http://clojuredocs.org/] <= 1.3
* `(doc let)`
* [http://clojure.org/cheatsheet]
* [http://clojuredocs.org/quickref/Clojure%20Core](Clojure.org Quick Ref)

= fn

:code
  ((fn [a b c d e]
    (+ a b c d e))
   1 2 3 4 5)

= defn

`def` + `fn`

:code
  (defn fib [n]
    (if (= n 0)
        1
        (if (= n 1)
            1
            (+ (fib (- n 1)) (fib (- n 2))))))

= cond
:code
  (defn fib [n]
    (cond
      (= n 0) 1
      (= n 1) 1
      :else (+ (fib (- n 1)) (fib (- n 2)))))

= case
:code
  (defn fib [n]
    (case n
      0 1
      1 1
      (+ (fib (- n 1)) (fib (- n 2)))))

= if + няколко неща за правене

:code
  (if (disaster-struck?)
    ((save-laptop) (save-stefan))
    (lick-ice-cream))

Не работи! Ще се опита да използва резултата от `(save-laptop)` като функция и ще му даде като аргумент резултата от `(save-stefan)`.

= do

:code
  (if (disaster-struck?)
    (do
      (save-laptop)
      (save-stefan)
      (save-the-world))
    (lick-ice-cream))

= print форми

В Clojure има два различни начина да обръщате обекти до низ.

:code
  (print [10 "goto 20"]) ; => [10 goto 20]
  (prn [10 "goto 20"])   ; => [10 "goto 20"]

* `(print a)` извежда `(str a)`
* `(println a)` е като `print` с нов ред накрая
* `(pr a)` извежда `(pr-str a)`
* `(prn a)` е като `pr` с нов ред накрая

= when

`if` + `do` - `else`

:code
  (when (am-grownup? self)
    (walk-naked)
    (lie-all-day)
    (eat-chocolate-all-day)
    (get-fat-all-day)
    (skip-lectures)
    (live-forever))

`when-not` е като `(when (not ))`.

= nil/truthiness

Лъжа са само `false` и `nil`:

:annotate
  (defn truth-level [x] (if x "true" "false"))

  (truth-level 5)      ; =>
  (truth-level "baba") ; =>
  (truth-level "")     ; =>
  (truth-level ())     ; =>
  (truth-level [])     ; =>
  (truth-level true)   ; =>
  (truth-level false)  ; =>
  (truth-level nil)    ; =>

= Не е като в Scheme

В Scheme празния списък е `nil`, в Clojure си е просто празен списък. `nil` е всъщност `null` в Java.

= if-let

`if-let` = `if` + `let`

:code
  (if-let [result (parse input)]
    (println "Parsed: " result)
    (println "Parsing failed"))

= arity

Дефиниции за различни на брой аргументи в една:
:annotate
  (defn call-a-master
    ([] "Stefan is coming to save you!")
    ([name] (str "Bootie-calling " name ". Get ready!")))

  (call-a-master) ; =>
  (call-a-master "Nikolay") ; =>

= Функциите са първокласни обекти в Clojure

* Може да ги създаваме когато си поискаме
* Можем да ги държим в стандартните структури от данни
* Може да ги подаваме като аргументи насам-натам
* Може да ги връщаме като резултат от функции

= Функции от по-висок ред

Функция, която или приема като аргумент функция или връща като резултат функция.

:annotate
  (defn fifth [l]
    (first (rest (rest (rest (rest l))))))
  (fifth [1 2 3 4 5])
  ; =>

  (def fifth-comp (comp first rest rest rest rest))
  (fifth-comp [1 2 3 4 5])
  ; =>

= Примери

:annotate
  (map str [1 2 3 4 5])
  ; =>

  (filter (complement nil?) [1 false 3 nil 5])
  ; =>

  (remove #(< % 3) [1 2 3 4 5])
  ; =>

  (map #(Math/floor (+ (Math/sqrt %) 11)) [1 2 3 4 5])
  ; =>

  (map #(+ % 5) [1 2 3 4 5])
  ; =>

  (map (partial + 5) [1 2 3 4 5])
  ; =>

= #

* `#(+ 5 %)`
* `#(< % 3)`
* `#(Math/pow %1 %2)`
* `#(#(+ % %))` – не можем да ги влагаме
* Няма неявно `do`, само един израз

= рекурсията – враг на народа

:annotate
  (defn pow [base exp]
    (if (zero? exp)
      1
      (* base (pow base (dec exp)))))

  (pow (bigint 2) (bigint 10000))
  ; =>

Това не е опашкова рекурсия.

= опашати степени

:annotate
  (defn pow [base exp]
    (letfn [(pow-helper [base exp acc]
              (if (zero? exp)
                acc
                (pow-helper base (dec exp) (* base acc))))]
      (pow-helper base exp 1)))

  (pow (bigint 2) (bigint 10000))
  ; =>

JVM не поддържа оптимизация на опашкова рекурсия.

= recur
:annotate
  (defn pow [base exp]
    (letfn [(pow-helper [base exp acc]
              (if (zero? exp)
                acc
                (recur base (dec exp) (* base acc))))]
      (pow-helper base exp 1)))

  (pow (bigint 2) (bigint 10000))
  ; =>

= loop

:code
  (defn random-draws [number-of-rounds]
    (println "Initializng…")
    (loop [sum 0 rounds-remaing number-of-rounds]
      (let [random-number (inc (rand-int 6))]
        (println "Current sum: " sum)
        (println "Dice: " random-number)
        (when (> rounds-remaing 0)
          (recur (+ sum random-number) (dec rounds-remaing)))))
    (println "Deinitializing…"))

  (random-draws 4)

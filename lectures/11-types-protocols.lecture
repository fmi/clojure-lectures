= Днес

* протоколи
* записи и типове
* имплементиране на протоколи
* имплементиране на clojure-ските абстракции

= Протоколи
== Протоколите ни позволяват да дефинираме интерфейс за дадена абстракция и да дефинираме различни имплементации, докато ползваме същия интерфейс.

= Протокол за матрици

:code
  (defprotocol Matrix
    "Protocol for working with 2d datastructures."
    (lookup [matrix i j])
    (update [matrix i j value])
    (rows [matrix])
    (cols [matrix])
    (dims [matrix]))

= Интерфейс в Java

* Дефинира интерфейс за работа с дадена абстракция
* Методи и техните аргументи, без имплементация
* Често се използва за полиморфизъм
* Един клас може да имплементира много интерфейси

= Пример с интерфейси

{{{
<pre>
  public interface IntList {
    int get(int i);
    void set(int i, int value);
    int length();
  }

  class ArrayIntList implements IntList {
    …
    public int get(int i) {
      return array[i];
    }

    public void set(int i, int e) {
      array[i] = e;
    }
    …
  }
  …
  IntList sort(IntList l);
</pre>
}}}

= Протоколи в подробности

* Всеки протокол генерира Java интерфейс
* Но имате собствен (също бърз) метод за викане на правилните функции на правилния тип
* Събират най-яките неща от интерфейсите в Java: не очакват имплементация, един тип може да имплементира повече от един протокол
* Без гадните: можем да добавяме интерфейси към тип динамично и независимо от типа, не се поддържа наследяване на протоколи

= `extend-protocol`

:code
  (extend-protocol Matrix
    clojure.lang.IPersistentVector
    (lookup [this i j]
      (get-in this [i j]))
    (update [this i j value]
      (assoc-in this [i j] value))
    (rows [this]
      (seq this))
    (cols [this]
      (apply map vector this))
    (dims [this]
      [(count this) (count (first this))]))

* Можем да кръстим първия аргумент както си искаме. Конвенцията е да е `this`. Можеше да е `vov`, например.
* Може да ползваме който си искаме вграден или наш тип.
* Няма нужда да имплементираме всичко. Clojure ще хвърли exception.

= Имплементация в `nil`

:code
  (extend-protocol Matrix
    nil
    (lookup [x i j])
    (update [x i j value])
    (rows [x] [])
    (cols [x] [])
    (dims [x] [0 0]))

* Понякога искаме функциите ни да работят смислено и върху `nil`

= Пример

:code
  (defn matrix
    "Create a vector of h w-item vectors."
    [h w]
    (vec (repeat h (vec (repeat w nil)))))

  (def m (matrix 3 4))
  (def m-baba (update m 0 1 :baba))

  (lookup m 0 1)
  ; nil
  (lookup m-baba 0 1)
  ; :baba

  (rows m-baba)
  ; ([nil :baba nil nil] [nil nil nil nil] [nil nil nil nil])

  (cols m-baba)
  ; ([nil nil nil] [:baba nil nil] [nil nil nil] [nil nil nil])

  (lookup nil 100 100)
  ;= nil
  (dims nil)
  ;= [0 0]

= `extend-type`

:code
  (extend-type clojure.lang.IPersistentVector
    Matrix
    (lookup [this i j] …)
    Shuffleable
    (shuffle [this] …))

* Като `extend-protocol`, но можем да имплементираме няколко протокола върху един тип
* И `extend-type` и `extend-protocol` са макроси върху `extend`

= extend

* `extend` приема речник от функции и е по-мощен от `extend-protocol` и `extend-type`.
* Позволява ни да преизползваме функции в две имплементации.

= extend
== Пример

Искаме `clojure.lang.IPersistentMap` да имплементира `Matrix`:

:code
  (extend-type clojure.lang.IPersistentMap
    Matrix
    (lookup [this i j] (get-in this [i j]))
    (update [this i j value] (assoc-in this [i j] value))
    (rows [this]
      (let [[w h] (dims this)]
        (for [i (range w)]
          (for [j (range h)]
            (get-in this [i j])))))
    (cols [this]
      (let [[w h] (dims this)]
        (for [j (range h)]
          (for [i (range w)]
            (get-in this [i j])))))
    (dims [this]
      [(inc (apply max (keys this)))
       (inc (apply max (map #(inc (apply max (vals %)))
                            (vals this))))]))
= extend
== Пример

Може да използваме `extend` така:

:code
  (def assoc-matrix-impl
    {:lookup (fn [this i j] (get-in this [i j]))
     :update (fn [this i j value] (assoc-in this [i j] value)) })

  (extend clojure.lang.IPersistentVector
    Matrix
    (merge assoc-matrix-impl
      {:rows (fn [this] (seq this))
       :cols (fn [this] (apply map vector this))
       :dims (fn [this] [(count this) (count (first this))]) }))

  (extend clojure.lang.IPersistentMap
    Matrix
    (merge assoc-matrix-impl
      {...}))

= Да си припомним `defrecord`
== Код

:annotate
  (defrecord Record [x y])

  (def r (Record. 5 6))
  (.x r)               ; =>
  (:y r)               ; =>
  (assoc r :x 8)       ; =>
  (dissoc r :y)        ; =>
  (assoc r :baba 100)  ; =>

= Да си припомним `defrecord`
== Features

* Дефинираме полета предварително
* Отива до Java class (бърз достъп до полетата)
* Участва в асоциативната абстракция
* Инстанциите са нормални clojure-ски стойности – можем да ги сравняваме, отпечатват се ОК, могат да са ключове на мап
* Можем да добавяме полета (достъпват се по-бавно)
* Можем да махаме полета (ако са задължителни получаваме мап)
* Конструктори: `->Record`, `map->Record`

= Записите не са част от namespace-a

:code
  (ns example)
  (defn f [] "baba")
  (defrecord R [x])

  (ns other)
  (example/f)   ; "baba"
  example/R     ; java.lang.RuntimeException: No such var: example/R

  (import example.R)
  example.R


= Може да имплементират интерфейси

* С познатите ни `extend-type` и `extend-protocol`
* Да вкараме имплементацията в самия тип.

= Inline имплементация на интерфейс
== Код

:code
  (defrecord Point [x y]
    Matrix
    (lookup [pt i j]
      (when (zero? j)
        (case i
          0 x
          1 y)))
    (update [pt i j value]
      (if (zero? j)
        (condp = i
          0 (Point. value y)
          1 (Point. x value))
        pt))
    (rows [pt] [[x] [y]])
    (cols [pt] [[x y]])
    (dims [pt] [2 1]))


= Inline имплементация на интерфейс
== Особености

* Можем да ползваме полетата директно в имплементациите, няма нужда от `(:x this)`
* По-бързо, защото класът имплементира интерфейса на ниво Java
* Не толкова гъвкаво, защото записите по подразбиране имплементират някои интерфейси и няма да можем да дефинираме функции със същите имена

= reify
== Обект от анонимент тип, който имплементира интерфейс

:code
  (defn const-matrix [value]
    (reify Matrix
      (lookup [this i j] value)))

* Най-често се ползва за адаптер върху Java класове

= Няколко помощни функции

* `(extenders protocol)` – връща типовете, които имплементират даден протокол
* `(extends? protocol type)` – дали протокол е бил имплементиран в тип
* `(satisfies? protocol instance)` – дали протокол е бил имплементиран в даден обект
* `(instance? class instance)` – дали обект е инстанция на даден Java клас

= Какво се случва при съвпадения

При две имплементации на един и същи протокол върху:

* един и същи тип, печели последната
* два типа от една и съща йерархия, печели имплементацията на най-специфичния (най-младшия)
* два независими типа, печели случайна имплементация

= `deftype`

* Low-level
* Само с `(.x point)`
* Няма value семантика
* Mutable fields

= `deftype`
== Пример

:annotate
  (deftype SchrödingerCat [^:unsynchronized-mutable state]
   clojure.lang.IDeref
   (deref [sc]
    (locking sc
     (or state
      (set! state (if (zero? (rand-int 2))
                   :dead
                   :alive))))))

  (defn schrödinger-cat
   "Creates a new Schrödinger's cat. Beware, the REPL may kill it!"
   []
   (SchrödingerCat. nil))

  (def felix (schrödinger-cat))
  @felix                          ; =>
  (schrödinger-cat)               ; =>
  (schrödinger-cat)               ; =>

= Имплементация на абстракциите в Clojure

* „Просто“ имплементираме правилния интерфейс
* Още не са направени на протоколи
* [http://clojureatlas.com/](http://clojureatlas.com/)
* Или `scaffold`

= scaffold

:code

  (defn scaffold
   "Given an interface, returns a 'hollow' body suitable for use with `deftype`." [interface]
   (doseq [[iface methods] (->> interface
                            .getMethods
                            (map #(vector (.getName (.getDeclaringClass %))
                                   (symbol (.getName %))
                                   (count (.getParameterTypes %)))) (group-by first))]
    (println (str " " iface))
    (doseq [[_ name argcount] methods]
     (println
      (str " "
       (list name (into '[this] (take argcount (repeatedly gensym)))))))))

= Прост пример: обект, който брои двойно

:annotate

  (deftype DoubleCounter [coll]
    clojure.lang.Counted
    (count [this] (* 2 (loop [xs (.coll this) l 0]
                          (if (seq xs)
                            (recur (rest xs) (inc l))
                            l)))))

  (count (DoubleCounter. [1 2 3])) ; =>

= По-сложни типове

* `(scaffold clojure.lang.IPersistentSet)`
* `(scaffold clojure.lang.IPersistentMap)`
* Трябва да дефинираме доста неща :-)
* Трябва да ползваме `deftype`, защото класът от `defrecord` имплементира доста от интерфейсите


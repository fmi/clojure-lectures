= Днес

* Числа
* Transients
* Reducers

= Преди това

* [2048](http://gabrielecirulli.github.io/2048/)
* Дигитален хероин – пристрастява
* Много зарибявка
* Хайде да я имплементираме на Clojure?
* Има тема [във форумите](/topics/196)
* Малко експериментално, но може да е fun :)

= Числата в Clojure

В Clojure има няколко типа числа:

* long
* double
* BigInt
* BigDecimal
* Ratio

= long

:annotate
  (def answer 42)
  (def freezing -271)

  (type answer)    ; =>
  (Long/MAX_VALUE) ; =>

* Основния тип за цели числа
* Има знак
* Точност, ограничена от 64 бита

= Unchecked math

Ако излезем извън областта на long, Clojure няма да отиде в отрицателни числа, а ще хвърли exception.

:annotate
  (inc Long/MAX_VALUE)
  ; =>

"Стандартното" поведение е достъпно чрез серия оператори, започващи с `unchecked`:

:annotate
  (unchecked-inc Long/MAX_VALUE)
  ; =>

  (unchecked-add Long/MAX_VALUE 10)
  ; =>

= Unchecked math
== Другата опция

Може да направите и така:

:code
  (set! *unchecked-math* true)
  (inc Long/MAX_VALUE)

Това има малко особена семантика и рядко е смислено. Полезно е ако трябва да подражавате на Java модела.

= BigInt

* Arbitrary precision цели числа
* Има литерал – `42N` – и функция за преобразуване – `(bigint 42)`
* По-бавни, но "безкрайно" точни
* Стандартната имплементация с bigits

= BigInt (2)
== смесени операции

Ако операндите са с различни типове, Clojure предпочита по-общия:

:annotate
  (* 6N 7) ; =>

Забележете, че Clojure не "опростява" типа ­ резултата от горната операция е `BigInt`, въпреки че може да се събере в `long`.

= Auto-promoting

Операциите имат вариант, в който автоматично промотират към по-широк тип:

:annotate
  (def m Long/MAX_VALUE)

  (inc m)  ; =>
  (inc' m) ; =>

  (* m 2)  ; =>
  (*' m 2) ; =>

Тези операции са по-бавни, защото трябва да извършват проверки за overflow.

= Auto-promoting
== pros & cons

Clojure предпочита да хвърля грешки при overflow. Python и Ruby предпочитат да промотират типовете автоматично.

Какви са предимствата и недостатъците на тези подходи?

= double

* Стандартния тип за числа с плаваща запетая
* В Java е `double`
* Бърз, но има грешка
* Литералът е очевидния – `3.14`

= double (2)
== Точност

Има някакъв проблем с точността на `double`. Например:

:annotate
  (+ 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5)
  ; =>

  (+ 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1)
  ; =>

Първото е точно, докато второто не. Защо?

= double (3)
== Disclaimer

Учебниците ви лъжат – `float`/`double` не пазят реални числа. Пазят техни рационални приближения.

= double (4)
== Misusage

{{{
  <p><strong>Никога</strong> не пазете парични суми в <code>double</code>.</p>
  <p>Сериозно.</p>
}}}

= BigDecimal

* Тип с "произволна" десетична точност
* В Java е `java.lang.BigDecimal`
* Много бавен. Пази числата като текстов низ.
* Литералът е `3.14M`
* (`M` за deci<b>M</b>al, `N` за i<b>N</b>teger)

= BigDecimal (2)
== Точност

Изглежда като панацея:

:annotate
  (+ 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1)
  ; =>

  (+ 0.1M 0.1M 0.1M 0.1M 0.1M 0.1M 0.1M 0.1M 0.1M 0.1M)
  ; =>

...но не е съвсем. Как може да се загуби точност?

= BigDecimal (3)
== Грешки

:annotate
  (/ 22M 7M) ; =>

  (with-precision 4
    (/ 22M 7M))
  ; =>

  (def ten-thirds (with-precision 4 (/ 10M 3)))

  (* ten-thirds 3) ; =>

Уви, делението на десетични числа не е лесна работа.

= Ratio

* Рационално число
* Учудващо подценяван тип
* `(/ 22 7)` връща `Ratio`
* Дори има литерал: `22/7`
* Възможно най-точния тип

= Ratio (2)
== Пример

:annotate
  (/ 22 7) ; =>

  (def ten-thirds (/ 10 3))

  (* ten-thirds 3) ; =>

Обърнете внимание: ако знаменателя е `1`, операцията връща числителя. Типът зависи:

:annotate
  (* 1/2 4) ; =>

  (/ 10 2)  ; =>
  (/ 10N 2) ; =>

= Обръщане

При операции със смесени типове, резултатът се обръща до по-горния в този списък:

+ double
+ BigDecimal
+ Ratio
+ BigInt
+ long

= identical?
== Или кога две числа са наистина еднакви

:annotate
  (identical? 100 100)      ; =>

:annotate
  (identical? 200 200)      ; =>
  (identical? 5.42 5.42)    ; =>
  (identical? 5N (inc 4N))  ; =>
  (identical? 5/2 5/2)      ; =>

:annotate
  (identical? 15/3 5)       ; =>

:annotate
Под JVM идентични са само целите числа в областта между -128 и 127.

= Transients
== Философски въпрос

Ако дърво падне в гора, където няма кой да го чуе, ще издаде ли звук.

{{{<p class="action">Сериозен съм...</p>}}}

= Transients (2)
== Философски въпрос, mk. II

Ако чиста функция мутира локални данни с цел да произведе immutable резултат, това OK ли е?

= Хистограма

Функция, която брои колко пъти се среща дадена цифра и връща вектор.

:code
  (defn histogram [numbers]
    (reduce (fn [result n]
              (update-in result [n] inc))
            (vec (repeat 10 0))
            numbers))

  (time (histogram dataset))
  ; Elapsed time: 359.445 msecs

= Хистограма
== Проблемът

За всяко число се създава нов вектор – временен резултат, който се използва за агрегирането на крайния. Императивния подход тук всякаш би бил по-ефективен.

= Enter the transient

:annotate
  (def v1 (transient []))
  (def v2 (conj! v1 1))

  (count v1) ; =>
  (count v2) ; =>

= Transients
== Интерфейс

* Създаваме с `(transient x)`
* Използваме операции с `!`
* Вземаме immutable копие с `(persistent! x)`
* Ползваме резултатите от `conj!`, както ползваме резултатите от `conj`
* Трансиента може да се "пипа" само от една нишка

= Transients
== Пример

:annotate
  (def v1 (transient []))
  (def v2 (-> v1
              (conj! 1)
              (conj! 2)
              (conj! 3)))

  (type v2) ; =>
  (def v3 (persistent! v2))

  v3        ; =>
  (type v3) ; =>

  (count v2) ; =>

= Хистограма
== Решението

А може и така:

:code
  (defn histogram [numbers]
    (persistent!
      (reduce (fn [result n]
                (assoc! result n (inc (get result n)))
                result)
              (transient (vec (repeat 10 0)))
              numbers)))

  (time (histogram dataset))
  ; Elapsed time: 38.452 msecs

= Днес

* defrecord
* протоколи
* записи и типове
* имплементиране на протоколи

= Преди това

* Няма да има повече домашни
* 16.06 - Тест 2
* 05.07 - Защита на проекти

= Записи
== defrecord

* Потребителски тип
* Дефинира се с `(defrecord Point [x y])`
* Създава се с `(Point. 3 4)`
* Съдържа определен брой наименовани полета

= Записи
== Достъпване

:annotate
  (defrecord Point [x y])

  (def pythagorean (Point. 3 4))

  pythagorean      ; =>
  (.x pythagorean) ; =>
  (.y pythagorean) ; =>

= Записи
== Асоциативна абстракция

Записите участват в асоциативната абстракция

:annotate
  (defrecord Point [x y])
  (def pythagorean (Point. 3 4))

  (keys pythagorean)        ; =>
  (vals pythagorean)        ; =>

  (assoc pythagorean :z 10)
  ; =>

  (dissoc pythagorean :x)
  ; =>

= Записи
== Асоциативна абстракция

* Съществуващите полета са достъпни като ключови думи
* Може да добавяте нови ключове в записа (достъпват се по-бавно)
* Ако махнете задължителен ключ от записа, ще получите прост мап

= Записи
== Интересни факти

* Value семантика
* Всеки запис дефинира Java клас
* Всичките му полета са `public final` полета в класа
* Достъпа е много по-бърз от map
* Записите не са функции

= Записи
== Конструктори

Всеки record дава три възможни начина на конструиране:

* `(Point. 1 2)`
* `(->Point 1 2)`
* `(map->Point {:x 1 :y 2})`

= Записи
== Конструктори (2)

`Point.` е най-мощния конструктор - може да приема допълнителни ключове и метаданни.

:annotate
  (defrecord Point [x y])

  (Point. 1 2)
  ; =>
  (Point. 1 2 {:weird true} {:z 3})
  ; =>

= Записи
== Конструктори (3)

`->Point` е функция, която създава запис. Обърнете внимане, че `Point.` не е функция, а Java interop форма.

:code
  (defrecord Point [x y])

  (Point. 1 2)  ; #lectures.sandbox.Point{:x 1, :y 2}
  (->Point 1 2) ; #lectures.sandbox.Point{:x 1, :y 2}

  (apply ->Point [1 2])
  ; #lectures.sandbox.Point{:x 1, :y 2}

  (apply Point. [1 2])
  ; ClassNotFound: Point.

= Записи
== Конструктори (4)

`map->Point` е изключително очевиден:

:annotate
  (defrecord Point [x y])

  (map->Point {:x 3 :y 4})
  ; =>

  (map->Point {:x 3 :y 4 :z 5})
  ; =>

  (map->Point {:y 4 :z 5})
  ; =>

= Записи
== Type hinting

Може да се дава type hinting на записа:

:annotate
  (defrecord Person [^String name ^long age])

  (Person. "Jesus" 33)
  ; =>
  (Person. "Jesus" "old")
  ; =>
  (Person. [135505] 33)
  ; =>

Ползва се за performance, но в случая на примитивен тип дава и type safety.

= Записите не са част от namespace-a

:code
  (ns example)
  (defn f [] "baba")
  (defrecord R [x])

  (ns other)
  (example/f)   ; "baba"
  example/R     ; java.lang.RuntimeException: No such var: example/R

  (import example.R)
  example.R

= Записи
== Общи приказки

* Кога се ползват?
* В общия случай се предпочита мап
* Record-и се ползват когато имате нужда от полиморфизъм
* Миграцията от map към record е тривиална

= Протоколи
== Протоколите ни позволяват да дефинираме интерфейс за дадена абстракция и да дефинираме различни имплементации, докато ползваме същия интерфейс.

= Протокол за матрици

:code
  (defprotocol Matrix
    "Protocol for working with 2d datastructures."
    (lookup [matrix i j])
    (update [matrix i j value])
    (rows [matrix])
    (cols [matrix])
    (dims [matrix]))

= Интерфейс в Java

* Дефинира интерфейс за работа с дадена абстракция
* Методи и техните аргументи, без имплементация
* Често се използва за полиморфизъм
* Един клас може да имплементира много интерфейси

= Пример с интерфейси

{{{
<pre>
  public interface IntList {
    int get(int i);
    void set(int i, int value);
    int length();
  }

  class ArrayIntList implements IntList {
    …
    public int get(int i) {
      return array[i];
    }

    public void set(int i, int e) {
      array[i] = e;
    }
    …
  }
  …
  IntList sort(IntList l);
</pre>
}}}

= Протоколи в подробности

* Всеки протокол генерира Java интерфейс
* Но имате собствен (също бърз) метод за викане на правилните функции на правилния тип
* Събират най-яките неща от интерфейсите в Java: не очакват имплементация, един тип може да имплементира повече от един протокол
* Без гадните: можем да добавяме интерфейси към тип динамично и независимо от типа, не се поддържа наследяване на протоколи

= `extend-protocol`

:code
  (extend-protocol Matrix
    clojure.lang.IPersistentVector
    (lookup [this i j]
      (get-in this [i j]))
    (update [this i j value]
      (assoc-in this [i j] value))
    (rows [this]
      (seq this))
    (cols [this]
      (apply map vector this))
    (dims [this]
      [(count this) (count (first this))]))

* Можем да кръстим първия аргумент както си искаме. Конвенцията е да е `this`. Можеше да е `vov`, например.
* Може да ползваме който си искаме вграден или наш тип.
* Няма нужда да имплементираме всичко. Clojure ще хвърли exception.

= Имплементация в `nil`

:code
  (extend-protocol Matrix
    nil
    (lookup [x i j])
    (update [x i j value])
    (rows [x] [])
    (cols [x] [])
    (dims [x] [0 0]))

* Понякога искаме функциите ни да работят смислено и върху `nil`

= Пример

:code
  (defn matrix
    "Create a vector of h w-item vectors."
    [h w]
    (vec (repeat h (vec (repeat w nil)))))

  (def m (matrix 3 4))
  (def m-baba (update m 0 1 :baba))

  (lookup m 0 1)
  ; nil
  (lookup m-baba 0 1)
  ; :baba

  (rows m-baba)
  ; ([nil :baba nil nil] [nil nil nil nil] [nil nil nil nil])

  (cols m-baba)
  ; ([nil nil nil] [:baba nil nil] [nil nil nil] [nil nil nil])

  (lookup nil 100 100)
  ;= nil
  (dims nil)
  ;= [0 0]

= `extend-type`

:code
  (extend-type clojure.lang.IPersistentVector
    Matrix
    (lookup [this i j] …)
    Shuffleable
    (shuffle [this] …))

* Като `extend-protocol`, но можем да имплементираме няколко протокола върху един тип
* И `extend-type` и `extend-protocol` са макроси върху `extend`

= extend

* `extend` приема речник от функции и е по-мощен от `extend-protocol` и `extend-type`.
* Позволява ни да преизползваме функции в две имплементации.

= extend
== Пример

Искаме `clojure.lang.IPersistentMap` да имплементира `Matrix`:

:code
  (extend-type clojure.lang.IPersistentMap
    Matrix
    (lookup [this i j] (get-in this [i j]))
    (update [this i j value] (assoc-in this [i j] value))
    (rows [this]
      (let [[w h] (dims this)]
        (for [i (range w)]
          (for [j (range h)]
            (get-in this [i j])))))
    (cols [this]
      (let [[w h] (dims this)]
        (for [j (range h)]
          (for [i (range w)]
            (get-in this [i j])))))
    (dims [this]
      [(inc (apply max (keys this)))
       (inc (apply max (map #(inc (apply max (vals %)))
                            (vals this))))]))
= extend
== Пример

Може да използваме `extend` така:

:code
  (def assoc-matrix-impl
    {:lookup (fn [this i j] (get-in this [i j]))
     :update (fn [this i j value] (assoc-in this [i j] value)) })

  (extend clojure.lang.IPersistentVector
    Matrix
    (merge assoc-matrix-impl
      {:rows (fn [this] (seq this))
       :cols (fn [this] (apply map vector this))
       :dims (fn [this] [(count this) (count (first this))]) }))

  (extend clojure.lang.IPersistentMap
    Matrix
    (merge assoc-matrix-impl
      {...}))

= Може да имплементират интерфейси

* С познатите ни `extend-type` и `extend-protocol`
* Да вкараме имплементацията в самия тип.

= Inline имплементация на интерфейс
== Код

:code
  (defrecord Point [x y]
    Matrix
    (lookup [pt i j]
      (when (zero? j)
        (case i
          0 x
          1 y)))
    (update [pt i j value]
      (if (zero? j)
        (condp = i
          0 (Point. value y)
          1 (Point. x value))
        pt))
    (rows [pt] [[x] [y]])
    (cols [pt] [[x y]])
    (dims [pt] [2 1]))


= Inline имплементация на интерфейс
== Особености

* Можем да ползваме полетата директно в имплементациите, няма нужда от `(:x this)`
* По-бързо, защото класът имплементира интерфейса на ниво Java
* Не толкова гъвкаво, защото записите по подразбиране имплементират някои интерфейси и няма да можем да дефинираме функции със същите имена

= reify
== Обект от анонимент тип, който имплементира интерфейс

:code
  (defn const-matrix [value]
    (reify Matrix
      (lookup [this i j] value)))

* Най-често се ползва за адаптер върху Java класове

= Няколко помощни функции

* `(extenders protocol)` – връща типовете, които имплементират даден протокол
* `(extends? protocol type)` – дали протокол е бил имплементиран в тип
* `(satisfies? protocol instance)` – дали протокол е бил имплементиран в даден обект
* `(instance? class instance)` – дали обект е инстанция на даден Java клас

= Какво се случва при съвпадения

При две имплементации на един и същи протокол върху:

* един и същи тип, печели последната
* два типа от една и съща йерархия, печели имплементацията на най-специфичния (най-младшия)
* два независими типа, печели случайна имплементация

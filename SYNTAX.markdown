## Синтакис на слайдовете

Тук е описан синтаксиса на файловете (.lecture) с който са 
описани презентациите.Когато сте добавили лекцията в `index.yml` файла първия слайд ще бъде запълнен със заглавитето и датата опоменати там.


Основната структура на файла (.lecture) е съвкупността от слайдове характеризирани със тяхното заглавие и подзаглавие.Когато сложим маркер за заглавие на слайд тогава завършваме предния слайд тоест няма специален синтаксис за край на слайд.

За да започнем нов слайд описаваме неговото заглавие започвайки реда с `=`

### _Пример_
	= Заглавие

Опционално може да добавим подзаглавие на слайда като добавим ред започващ със `==`.

###Пример:  
	= Заглавие
	== Подзаглавие (опционално)
  
След описанието на заглавието и/или подзаглавието започва същинското съдържание на слайда.

То може да се формира от следните няколко елемента:
##1. Текст
 Може свободно да се пише текст като в него може да има болднат текст както и код.
 Синтаксиса е идентичен с този на Markdown тоест:

### _Пример_
 	Нормален *Болднат текст* и съответно `код`

##2. Линкове
 Линковете могат да се два вида нормален (Markdown) и съответно GitHub
###2.1 GitHub линкове
  Ползват се за лесно добавяне на линкове към хранилище в GitHub.Вместо да излписвате пълния линк може да пропуснем `https://github.com` .
 
### _Пример_
	[gh:fmi/lectures]

###2.2 Хтмл линк
 Описва линк със заглавие аналогично на синтаксиса на Markdown
### _Пример_
	[Заглавие на хиперлинка](http://еxample.com)

##3. Код (Clojure)
 Има два начина да покажете код в слайдовете - нормално и със анотация. За улеснени кода е highlighed както и при hover върху Clojure функции се показва тяхната документация.Документацията е както е описана от `doc`  формата.

### Annotated
Ако искаме да изпълним парче код в лекциите трябва да ползваме `:annotated` и добавяме коментар `; =>`. Коментара ще остойности последната форма преди него.

### _Пример_
    :annotated  
       (defn sum [a b]  
         (+ a b)) 
     
       (sum 1 2) ; => 
Тогава в лекциите ще се преработи:

     (defn sum [a b]  
       (+ a b)) 
     
     (sum 1 2) ; 3

 Другия вариант е просто код без да се evaluate коментарите.

### _Пример_
     :code   
       (def hello-world [name]  
         (prn "Hello," name))


##4. Списък
 Може и да добавяте списък от елементи, който е неподреден 

### _Пример_
 
     * Булет 1
     * Булет 2

##5. HTML
 Освен всичко гореупоменато може да се добавя и html код без специален синтаксис.

#Примерен (.lecture) файл:

    = Слайд 1
    == Подзаглавие
    
    * Слайдовете са в GitHub - [gh:fmi/lectures]
    * Това е текст *болд* и малко код `code`
    * [Примерен сайт](http://example.com)
    * [http://clojure.org/cheatsheet]

    :code
      ((fn [a b c d e]
        (+ a b c d e))
       1 2 3 4 5)

    :annotate
      (map str [1 2 3 4 5])
      ; =>
     
     Това е тестов HTML фрагмент:
     <img src="image.jpg" alt="Custom image"></img>
